import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Copy, FileText } from 'lucide-react';
import { toast } from '@/hooks/use-toast';
import { BaseNodeConfig, BaseNodeConfigSchema } from './schema';
import { EXAMPLE_CONFIGS } from './constants';

interface BaseNodeSettingsProps {
  config: BaseNodeConfig;
  onChange: (config: BaseNodeConfig) => void;
}

export function BaseNodeSettings({ config, onChange }: BaseNodeSettingsProps) {
  const [activeTab, setActiveTab] = useState('basic');

  // Manejar cambios en la configuraci√≥n
  const updateConfig = (updates: Partial<BaseNodeConfig>) => {
    const newConfig = { ...config, ...updates };
    
    // Validar configuraci√≥n antes de aplicar
    const validation = BaseNodeConfigSchema.safeParse(newConfig);
    if (validation.success) {
      onChange(validation.data);
    } else {
      toast({
        title: 'Error de Configuraci√≥n',
        description: validation.error.errors[0]?.message || 'Configuraci√≥n inv√°lida',
        variant: 'destructive',
      });
    }
  };

  // Aplicar configuraci√≥n de ejemplo
  const applyExample = (exampleKey: keyof typeof EXAMPLE_CONFIGS) => {
    const example = EXAMPLE_CONFIGS[exampleKey];
    updateConfig(example);
    toast({
      title: 'Ejemplo Aplicado',
      description: `Configuraci√≥n "${example.name}" cargada exitosamente`,
    });
  };

  return (
    <div className="space-y-4">
      {/* Ejemplos r√°pidos */}
      <Card className="bg-gray-800 border-gray-700">
        <CardHeader className="pb-3">
          <CardTitle className="text-sm text-gray-200">‚ö° Configuraciones R√°pidas</CardTitle>
        </CardHeader>
        <CardContent className="space-y-2">
          <div className="flex flex-wrap gap-2">
            <Button
              onClick={() => applyExample('basic')}
              size="sm"
              variant="outline"
              className="text-xs border-gray-600 text-gray-300 hover:bg-gray-700"
            >
              üìã B√°sica
            </Button>
            <Button
              onClick={() => applyExample('advanced')}
              size="sm"
              variant="outline"
              className="text-xs border-gray-600 text-gray-300 hover:bg-gray-700"
            >
              üöÄ Avanzada
            </Button>
            {/* TODO: Agregar m√°s botones de ejemplo espec√≠ficos */}
          </div>
        </CardContent>
      </Card>

      {/* Configuraci√≥n principal */}
      <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
        <TabsList className="grid w-full grid-cols-2 bg-gray-800">
          {/* TODO: Ajustar n√∫mero de tabs seg√∫n necesidades */}
          <TabsTrigger value="basic" className="text-xs">B√°sico</TabsTrigger>
          <TabsTrigger value="advanced" className="text-xs">Avanzado</TabsTrigger>
        </TabsList>

        <TabsContent value="basic" className="space-y-4">
          {/* Configuraci√≥n b√°sica */}
          <div className="space-y-4">
            <div>
              <Label className="text-gray-300 text-xs">Nombre del Nodo</Label>
              <Input
                value={config.name || ''}
                onChange={(e) => updateConfig({ name: e.target.value })}
                placeholder="Nombre descriptivo del nodo"
                className="bg-gray-700 border-gray-600 text-gray-100 placeholder-gray-400"
              />
              <div className="text-xs text-gray-400 mt-1">
                Nombre que aparecer√° en el flujo y en los logs
              </div>
            </div>

            {/* TODO: Agregar campos espec√≠ficos del nodo aqu√≠ */}
            {/* Ejemplo:
            <div>
              <Label className="text-gray-300 text-xs">URL del Endpoint</Label>
              <Input
                value={config.url || ''}
                onChange={(e) => updateConfig({ url: e.target.value })}
                placeholder="https://api.ejemplo.com/endpoint"
                className="bg-gray-700 border-gray-600 text-gray-100 placeholder-gray-400"
              />
              <div className="text-xs text-gray-400 mt-1">
                URL completa del endpoint a consumir
              </div>
            </div>
            */}
          </div>

          {/* Preview de la configuraci√≥n */}
          <Card className="bg-gray-900 border-gray-600">
            <CardContent className="p-3">
              <div className="text-sm text-gray-300">
                <div className="font-medium">Vista Previa</div>
                <div className="text-xs text-gray-400 mt-1">
                  Nodo: {config.name || 'Sin nombre'}
                  {/* TODO: Agregar informaci√≥n espec√≠fica del preview aqu√≠ */}
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="advanced" className="space-y-4">
          {/* Configuraci√≥n avanzada */}
          <div className="space-y-4">
            {/* TODO: Agregar configuraciones avanzadas espec√≠ficas del nodo aqu√≠ */}
            
            <div className="text-sm text-gray-400">
              üí° <strong>Configuraciones avanzadas disponibles pr√≥ximamente</strong>
            </div>

            {/* Ejemplo de configuraci√≥n avanzada:
            <div>
              <Label className="text-gray-300 text-xs">Timeout (segundos)</Label>
              <Input
                type="number"
                min="1"
                max="300"
                value={config.timeout || 30}
                onChange={(e) => updateConfig({ timeout: parseInt(e.target.value) || 30 })}
                className="bg-gray-700 border-gray-600 text-gray-100"
              />
              <div className="text-xs text-gray-400 mt-1">Tiempo m√°ximo de espera</div>
            </div>
            */}
          </div>

          {/* Informaci√≥n de configuraci√≥n */}
          <Card className="bg-gray-800 border-gray-700">
            <CardHeader className="pb-2">
              <CardTitle className="text-xs text-gray-300">üìä Resumen de Configuraci√≥n</CardTitle>
            </CardHeader>
            <CardContent className="text-xs text-gray-400 space-y-1">
              <div>‚Ä¢ Nombre: {config.name || 'No configurado'}</div>
              {/* TODO: Agregar resumen espec√≠fico del nodo aqu√≠ */}
              <div>‚Ä¢ Estado: Configurado</div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* Ayuda y documentaci√≥n */}
      <Card className="bg-gray-800 border-gray-700">
        <CardHeader className="pb-2">
          <CardTitle className="text-xs text-gray-300">üìö Ayuda y Documentaci√≥n</CardTitle>
        </CardHeader>
        <CardContent className="text-xs text-gray-400 space-y-2">
          <div>
            Este nodo permite [DESCRIPCI√ìN ESPEC√çFICA DEL NODO].
            {/* TODO: Agregar descripci√≥n real del nodo */}
          </div>
          <div>
            <strong>Variables disponibles:</strong> Puedes usar variables din√°micas con la sintaxis <code>{`{{variable.path}}`}</code>
          </div>
          <div>
            <strong>Ejemplos:</strong>
            <ul className="list-disc list-inside mt-1 space-y-1">
              <li><code>{`{{trigger.input.campo}}`}</code> - Datos del disparador</li>
              <li><code>{`{{step_nodeId.response}}`}</code> - Resultado de nodos anteriores</li>
              <li><code>{`{{connections.api.token}}`}</code> - Credenciales de conexiones</li>
            </ul>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}